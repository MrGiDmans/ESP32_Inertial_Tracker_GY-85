2.2 Программная реализация алгоритма обработки данных

В данном разделе подробно рассмотрена программная реализация алгоритма обработки данных с инерциальных датчиков на базе ESP32. Программа разработана с использованием FreeRTOS для обеспечения параллельного выполнения различных задач и эффективного управления ресурсами системы.

2.2.1 Структура программы

Программа реализована с использованием многозадачной архитектуры FreeRTOS, что позволяет эффективно распределить вычислительные ресурсы между различными процессами. Основные задачи программы:

1. readSensorsTask - задача чтения данных с датчиков:
   - Приоритет: 2
   - Ядро: 0
   - Частота выполнения: 100 Гц (SAMPLE_RATE)
   - Основные функции: чтение данных с акселерометра, гироскопа и магнитометра, расчет углов ориентации

2. sendDataTask - задача отправки данных:
   - Приоритет: 1
   - Ядро: 1
   - Частота отправки: 50 Гц (SEND_RATE)
   - Основные функции: формирование и отправка пакетов с углами ориентации по UDP

3. handleCommandsTask - задача обработки команд:
   - Приоритет: 1
   - Ядро: 1
   - Частота проверки: 100 Гц
   - Основные функции: прием и обработка команд управления, управление калибровкой

Для синхронизации доступа к общим ресурсам используются два семафора:
- dataMutex - защищает доступ к данным датчиков
- cmdMutex - защищает доступ к обработке команд

2.2.2 Чтение данных с датчиков

Чтение данных реализовано с использованием библиотек:
- Adafruit_ADXL345_U для акселерометра
- ITG3200 для гироскопа
- Adafruit_HMC5883_U для магнитометра

Процесс чтения данных включает:
1. Чтение сырых данных с датчиков по шине I²C
2. Применение калибровочных смещений
3. Расчет углов ориентации
4. Применение комплементарного фильтра

2.2.3 Реализация вычисления углов ориентации

Расчет углов ориентации реализован в трех основных функциях:

1. calculateAccelAngles():
   - Расчет углов Roll и Pitch на основе данных акселерометра
   - Использует формулы:
     Roll = atan2(accY, accZ) * RAD_TO_DEG
     Pitch = atan2(-accX, sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG

2. calculateMagAngles():
   - Расчет угла Yaw на основе данных магнитометра
   - Использует формулу:
     Yaw = atan2(magY, magX) * RAD_TO_DEG

3. complementaryFilter(float dt):
   - Реализует комплементарный фильтр с коэффициентом ALPHA = 0.96
   - Интегрирует угловые скорости гироскопа
   - Смешивает данные гироскопа и акселерометра
   - Корректирует Yaw с учетом данных магнитометра

2.2.4 Отправка данных

Отправка данных реализована в функции sendDataTask:
- Формат данных: "roll,pitch,yaw"
- Точность: 2 знака после запятой
- Протокол: UDP
- Адрес назначения: 192.168.4.2:12345

2.2.5 Обработка команд

Обработка команд реализована в функции handleCommandsTask:
- Порт приема: 12346
- Поддерживаемые команды:
  * calibrate_gyro - калибровка гироскопа
  * calibrate_mag - калибровка магнитометра
  * precise_on/off - переключение режима работы

2.2.6 Реализация калибровки

1. Калибровка гироскопа (calibrateGyro):
   - Сбор 500 сэмплов (GYRO_SAMPLES)
   - Расчет средних значений смещений
   - Сохранение в EEPROM

2. Калибровка магнитометра (calibrateMag):
   - Сбор данных в течение 10 секунд (MAG_CALIB_TIME)
   - Определение минимальных и максимальных значений
   - Расчет смещений как средних значений

3. Сохранение/загрузка калибровки:
   - Использование EEPROM для хранения
   - Проверка целостности данных через MAGIC_NUMBER
   - Размер данных: 26 байт

2.2.7 Особенности реализации

1. Точный режим (precise_mode):
   - Отключение инерциальной составляющей
   - Использование только акселерометра и магнитометра
   - Применяется для статических измерений

2. Обработка переполнения углов:
   - Функция interpolateAngle для плавного перехода через 0/360
   - Нормализация углов в диапазоне [-180, 180] для Roll и Pitch
   - Нормализация углов в диапазоне [0, 360] для Yaw

3. Оптимизация производительности:
   - Использование семафоров для синхронизации
   - Распределение задач по ядрам
   - Эффективное использование памяти

2.2.8 Псевдокод основной логики программы

1. Инициализация системы:
   - Создание системы синхронизации (семафоры)
   - Настройка коммуникационных интерфейсов (I2C, WiFi, UDP)
   - Инициализация датчиков движения
   - Загрузка сохраненных параметров калибровки
   - Запуск параллельных задач на разных ядрах процессора

2. Основной цикл чтения датчиков:
   - Проверка необходимости калибровки
   - Защищенное чтение данных со всех датчиков
   - Применение калибровочных коэффициентов
   - Расчет углов ориентации
   - Применение фильтрации данных
   - Соблюдение заданной частоты опроса

3. Цикл отправки данных:
   - Защищенное получение текущих углов
   - Форматирование данных для передачи
   - Отправка по сети
   - Соблюдение заданной частоты отправки

4. Цикл обработки команд:
   - Ожидание входящих команд
   - Обработка команд калибровки
   - Управление режимами работы
   - Отправка подтверждений
   - Защита от перегрузки системы

5. Алгоритм фильтрации:
   - Выбор режима работы (точный/обычный)
   - В точном режиме:
     * Использование только акселерометра и магнитометра
     * Компенсация наклона для расчета курса
   - В обычном режиме:
     * Комбинирование данных всех датчиков
     * Плавное смешивание данных
     * Коррекция курса с учетом наклона
   - Приведение углов к стандартным диапазонам
