2.3 Организация беспроводной передачи данных по UDP

В данном разделе рассмотрена реализация беспроводной передачи данных об ориентации с ESP32 на удаленное устройство по протоколу UDP через Wi-Fi. Выбор UDP обусловлен требованиями к передаче данных в реальном времени и особенностями работы системы ориентации.

2.3.1 Выбор протокола UDP

Для передачи данных об ориентации был выбран протокол UDP (User Datagram Protocol) по следующим причинам:

Преимущества UDP для данной задачи:
- Минимальная задержка передачи данных
- Отсутствие накладных расходов на установление соединения
- Эффективность при частой отправке небольших пакетов
- Отсутствие блокировки при потере пакетов

Недостатки UDP и их влияние на систему:
- Отсутствие гарантии доставки пакетов
- Возможное нарушение порядка пакетов
- Отсутствие контроля перегрузки сети

В контексте системы ориентации эти недостатки не являются критичными, так как:
- Потеря отдельных пакетов компенсируется высокой частотой отправки (50 Гц)
- Нарушение порядка пакетов не влияет на работу системы из-за независимости измерений
- Ограниченный размер сети (точка доступа) минимизирует проблемы с перегрузкой

2.3.2 Настройка Wi-Fi в режиме точки доступа

ESP32 настроен в режиме точки доступа (Access Point) для создания независимой сети:

Параметры точки доступа:
- SSID: ESP32_Tracker
- Пароль: 123456789
- Канал: 1
- Максимальное количество подключений: 4
- IP-адрес ESP32: 192.168.4.1

Преимущества использования режима AP:
- Независимость от внешней сети
- Простота подключения принимающего устройства
- Предсказуемая конфигурация сети
- Минимальные задержки передачи данных

2.3.3 Настройка UDP-сокета

Настройка UDP-сокета на ESP32 включает:

Параметры сокета:
- Порт приема команд: 12346
- Порт отправки данных: 12345
- IP-адрес получателя: 192.168.4.2

Инициализация:
- Создание объекта WiFiUDP
- Настройка сокета на прием команд
- Настройка параметров отправки данных

2.3.4 Отправка данных

Процесс отправки данных реализован в задаче sendDataTask:

Формат данных:
- Строка с углами ориентации
- Разделитель: запятая
- Точность: 2 знака после запятой
- Пример: "45.23,-12.34,178.90"

Процесс отправки:
1. Захват семафора для доступа к данным
2. Форматирование строки с углами
3. Отправка пакета по UDP
4. Освобождение семафора
5. Задержка для соблюдения частоты отправки

Частота отправки:
- 50 Гц (SEND_RATE)
- Регулируется через vTaskDelay
- Обеспечивает плавное обновление данных

2.3.5 Прием команд

Обработка входящих команд реализована в задаче handleCommandsTask:

Параметры приема:
- Порт: 12346
- Максимальный размер пакета: 64 байта
- Частота проверки: 100 Гц

Процесс обработки:
1. Проверка наличия входящих пакетов
2. Чтение команды
3. Определение IP-адреса отправителя
4. Выполнение команды
5. Отправка подтверждения

2.3.6 Возможные улучшения

1. Динамическое определение получателя:
   - Реализация протокола обнаружения устройств
   - Автоматическое определение IP-адреса
   - Поддержка множественных получателей

2. Оптимизация формата данных:
   - Использование бинарного формата
   - Сжатие данных
   - Добавление контрольных сумм

3. Повышение надежности:
   - Реализация механизма подтверждения
   - Буферизация данных
   - Адаптивная частота отправки

4. Расширение функциональности:
   - Добавление временных меток
   - Передача дополнительных параметров
   - Реализация протокола обновления прошивки

2.3.7 Псевдокод организации передачи данных

1. Инициализация сети:
   - Настройка WiFi в режиме AP
   - Создание точки доступа
   - Инициализация UDP-сокета

2. Цикл отправки данных:
   - Получение текущих углов
   - Форматирование данных
   - Отправка пакета
   - Соблюдение частоты

3. Цикл приема команд:
   - Проверка входящих пакетов
   - Обработка команд
   - Отправка подтверждений
   - Защита от перегрузки